import React, { useState, useEffect } from 'react';
import './App.css';

// ページコンポーネントのインポート
import LoginPage from './pages/LoginPage';
import PersonalPage from './pages/PersonalPage';
import StorePage from './pages/StorePage';
import DailyReportPage from './pages/DailyReportPage';
import ShiftPage from './pages/ShiftPage';
import SettingsPage from './pages/SettingsPage';

interface User {
  id: number;
  email: string;
  name: string;
  role: string;
  store_id?: number;
  employee_code?: string;
}

interface Store {
  id: number;
  name: string;
  code: string;
  subscription_status: string;
  monthly_goal: number;
}

type PageType = 'personal' | 'store' | 'daily-report' | 'shift' | 'settings';

function App() {
  const [user, setUser] = useState<User | null>(null);
  const [store, setStore] = useState<Store | null>(null);
  const [currentPage, setCurrentPage] = useState<PageType>('personal');
  const [loading, setLoading] = useState(true);

  // ページ読み込み時にトークンをチェック
  useEffect(() => {
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    const storeData = localStorage.getItem('store');
    
    if (token && userData) {
      try {
        setUser(JSON.parse(userData));
        if (storeData) {
          setStore(JSON.parse(storeData));
        }
      } catch (error) {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        localStorage.removeItem('store');
      }
    }
    setLoading(false);
  }, []);

  const handleLogin = (user: User, store?: Store) => {
    setUser(user);
    if (store) {
      setStore(store);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    localStorage.removeItem('store');
    setUser(null);
    setStore(null);
    setCurrentPage('personal');
  };

  if (loading) {
    return (
      <div style={{ 
        minHeight: '100vh', 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center',
        backgroundColor: '#f5f5f5'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{ fontSize: '18px', color: '#666' }}>読み込み中...</div>
        </div>
      </div>
    );
  }

  // ログインしていない場合
  if (!user) {
    return <LoginPage onLogin={handleLogin} />;
  }

  // 現在のページコンポーネントを取得
  const getCurrentPageComponent = () => {
    switch (currentPage) {
      case 'personal':
        return <PersonalPage user={user} />;
      case 'store':
        return <StorePage user={user} />;
      case 'daily-report':
        return <DailyReportPage user={user} />;
      case 'shift':
        return <ShiftPage user={user} />;
      case 'settings':
        return <SettingsPage user={user} onLogout={handleLogout} />;
      default:
        return <PersonalPage user={user} />;
    }
  };

  return (
    <div style={{ 
      minHeight: '100vh', 
      backgroundColor: '#f5f5f5',
      position: 'relative',
      paddingBottom: '80px' // フッターナビのスペース
    }}>
      {/* シンプルなヘッダー */}
      <header style={{
        backgroundColor: '#ffffff',
        padding: '15px 20px',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        borderBottom: '1px solid #e5e7eb',
        position: 'sticky',
        top: 0,
        zIndex: 100
      }}>
        <div>
          <span style={{ fontSize: '18px', color: '#1f2937', fontWeight: '500' }}>
            {user.name}さん
          </span>
          <span style={{ fontSize: '14px', color: '#6b7280', marginLeft: '10px' }}>
            ({user.role === 'owner' ? 'オーナー' : user.role === 'manager' ? '店長' : 'スタッフ'})
          </span>
        </div>
        
        <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
          {/* 通知ボタン（白いアイコン） */}
          <button style={{
            background: 'none',
            border: 'none',
            cursor: 'pointer',
            padding: '8px',
            borderRadius: '50%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}>
            <svg width="24" height="24" viewBox="0 0 24 24" fill="#6b7280">
              <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"/>
            </svg>
          </button>
          
          {/* ログアウトボタン */}
          <button 
            onClick={handleLogout}
            style={{
              backgroundColor: '#ef4444',
              color: 'white',
              border: 'none',
              padding: '8px 16px',
              borderRadius: '6px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '500'
            }}
          >
            ログアウト
          </button>
        </div>
      </header>

      {/* メインコンテンツ */}
      <main style={{ 
        padding: '20px',
        maxWidth: '1200px',
        margin: '0 auto'
      }}>
        {getCurrentPageComponent()}
      </main>

      {/* フッターナビゲーション（紫〜ピンクのグラデーション） */}
      <footer style={{
        position: 'fixed',
        bottom: 0,
        left: 0,
        right: 0,
        height: '70px',
        background: 'linear-gradient(90deg, #7B109F 0%, #FF00EE 100%)',
        display: 'flex',
        justifyContent: 'space-around',
        alignItems: 'center',
        zIndex: 100,
        boxShadow: '0 -2px 10px rgba(0, 0, 0, 0.1)'
      }}>
        {/* カレンダー（シフト調整） */}
        <button
          onClick={() => setCurrentPage('shift')}
          style={{
            background: 'none',
            border: 'none',
            color: 'white',
            cursor: 'pointer',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            padding: '8px',
            opacity: currentPage === 'shift' ? 1 : 0.7,
            transition: 'opacity 0.2s'
          }}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
            <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
          </svg>
        </button>

        {/* 店（店舗ページ）（オーナー・店長のみ） */}
        {(user.role === 'manager' || user.role === 'owner') && (
          <button
            onClick={() => setCurrentPage('store')}
            style={{
              background: 'none',
              border: 'none',
              color: 'white',
              cursor: 'pointer',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              padding: '8px',
              opacity: currentPage === 'store' ? 1 : 0.7,
              transition: 'opacity 0.2s'
            }}
          >
            <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </button>
        )}

        {/* ユーザー（個人ページ） */}
        <button
          onClick={() => setCurrentPage('personal')}
          style={{
            background: 'none',
            border: 'none',
            color: 'white',
            cursor: 'pointer',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            padding: '8px',
            opacity: currentPage === 'personal' ? 1 : 0.7,
            transition: 'opacity 0.2s'
          }}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
          </svg>
        </button>

        {/* 書類提出（日報ページ） */}
        <button
          onClick={() => setCurrentPage('daily-report')}
          style={{
            background: 'none',
            border: 'none',
            color: 'white',
            cursor: 'pointer',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            padding: '8px',
            opacity: currentPage === 'daily-report' ? 1 : 0.7,
            transition: 'opacity 0.2s'
          }}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
          </svg>
        </button>

        {/* 設定 */}
        <button
          onClick={() => setCurrentPage('settings')}
          style={{
            background: 'none',
            border: 'none',
            color: 'white',
            cursor: 'pointer',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            padding: '8px',
            opacity: currentPage === 'settings' ? 1 : 0.7,
            transition: 'opacity 0.2s'
          }}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
            <path d="M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"/>
          </svg>
        </button>
      </footer>
    </div>
  );
}

export default App;